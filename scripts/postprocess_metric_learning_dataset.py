"""Script for post-processing the dataset for metric learning from the data generated by 'collect_random_force_data.py."""

import argparse
import os

import numpy as np


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--data_path",
        required=True,
        type=str,
        help="The top level path for the data generated by 'collect_random_force_data.py'.",
    )
    args = parser.parse_args()

    for perturbation_entry in os.scandir(args.data_path):
        if perturbation_entry.is_dir():
            final_outer_manipuland_poses = []
            final_inner_manipuland_poses = []
            for run_entry in os.scandir(perturbation_entry.path):
                if run_entry.is_dir():
                    outer_manipuland_poses_path = os.path.join(
                        run_entry.path, "time_logs", "outer_manipuland_poses.txt"
                    )
                    inner_manipuland_poses_path = os.path.join(
                        run_entry.path, "time_logs", "inner_manipuland_poses.txt"
                    )
                    outer_manipuland_poses = np.loadtxt(outer_manipuland_poses_path)
                    inner_manipuland_poses = np.loadtxt(inner_manipuland_poses_path)
                    final_outer_manipuland_poses.append(outer_manipuland_poses[-1])
                    final_inner_manipuland_poses.append(inner_manipuland_poses[-1])

            final_manipuland_pose_error = np.asarray(final_outer_manipuland_poses) - np.asarray(
                final_inner_manipuland_poses
            )
            np.savetxt(
                os.path.join(perturbation_entry.path, "mean_final_outer_manipuland_pose_error"),
                np.mean(final_manipuland_pose_error, axis=0),
            )


if __name__ == "__main__":
    main()
